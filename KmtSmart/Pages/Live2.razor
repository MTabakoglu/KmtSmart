@page "/live2/{id:int}"
@using System.Timers
@inject ILiveDataService liveDataService
@inject ICommandService commandService
@inject BlazorTimer Timer
@implements IDisposable

@if (liveData != null)
{
    if (liveData.CuttingData != null)
    {
        <div class="content p-0 m-0">
            <div class="row mb-2">
                <div class="col text-center">
                    <button type="button" class="btn btn-success mb-2">
                        @liveData.CuttingData.WorkOrderName<span class="badge badge-light">@liveData.CuttingData.WorkorderCuttingId</span>
                        <span class="sr-only">unread messages</span>
                    </button>
                    <div style="width: 140px; height: 140px" class="card rounded-circle bg-primary text-center text-white m-auto">
                        <h4 class="center mt-2">@liveData.CuttingData.CuttingType</h4>
                        <div class="center">
                            <img class="rounded-circle" src="img/user.jpg" style="width:50px; height:50px; margin-top: 0px">
                        </div>
                        <h6 class="center mt-2">@liveData.CuttingData.Geometry - @liveData.CuttingData.MaterialType</h6>

                    </div>
                </div>

            </div>
            <div class="row mb-2">
                <span class="small text-right">@liveData.TimeToAdd</span>
            </div>
            <div class="row mb-2">
                <div class="col-md-3 p-1">
                    <div class="card p-2 bg-secondary" style="height: 120px">
                        <button type="button" class="btn btn-danger" data-toggle="modal" data-target="#StoppedModal">
                            STOP !!!
                        </button>

                        <!-- Modal -->
                        <div class="modal fade" id="StoppedModal" tabindex="-1" role="dialog" aria-labelledby="StoppedModalLabel" aria-hidden="true">
                            <div class="modal-dialog" role="document">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title text-danger" id="StoppedModalLabel">Dikkat!</h5>
                                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                            <span aria-hidden="true">&times;</span>
                                        </button>
                                    </div>
                                    <div class="modal-body">
                                        <p class="text-danger">Makinayı durdurmak istediğinize emin misiniz?</p>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                        <button type="button" class="btn btn-danger" @onclick="MachineStop" data-dismiss="modal">Ok. Mackine Stopped.</button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        @if (liveData.CuttingData.CuttingType != "Manual")
                        {
                            <br />
                            <button type="button" class="btn btn-warning" data-toggle="modal" data-target="#PausedModal">
                                PAUSE !
                            </button>

                            <!-- Modal -->
                            <div class="modal fade" id="PausedModal" tabindex="-1" role="dialog" aria-labelledby="PausedModalLabel" aria-hidden="true">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title text-primary" id="PausedModalLabel">Dikkat!</h5>
                                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                <span aria-hidden="true">&times;</span>
                                            </button>
                                        </div>
                                        <div class="modal-body">
                                            <p class="text-primary">Makinayı Bekletme Moduna almak istediğinize emin misiniz?</p>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                            <button type="button" class="btn btn-warning" @onclick="MachinePause" data-dismiss="modal">Ok. Mackine Paused.</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <div class="col-md-9 p-1">
                    <div class="card bg-warning p-3" style="height: 120px">
                        <h6 class="mt-2 mb-0">Kalan Süre</h6>
                        <div class="progress">
                            <div class="progress-bar progress-bar-striped bg-secondary" role="progressbar" style="width: @CompletionRate%" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">% @CompletionRate</div>
                        </div>
                        <h6 class="mt-2">Toplam Kalan Süre <span class="badge badge-info px-3 mx-2"> @TimeSpan.FromSeconds(liveData.CuttingData.TotalTime).ToString()</span></h6>

                    </div>
                </div>
            </div>
            <div class="row clearfix">
                <div class="col-md-2 text-center">
                    <canvas width="240" height="240" style="width: 120px; height: 120px;"></canvas>
                    <div style="display:inline;width:120px;height:120px;">
                        <input type="text" class="knob" data-thickness="0.3" data-anglearc="250" data-angleoffset="-125" data-min="0" data-max="100" value="@liveData.CuttingData.MainMotorPower" data-width="120" data-height="120" data-fgcolor="#00c0ef" style="width: 64px; height: 40px; position: absolute; vertical-align: middle; margin-top: 40px; margin-left: -92px; border: 0px; background: none; font: bold 24px Arial; text-align: center; color: rgb(0, 192, 239); padding: 0px; appearance: none;">
                    </div>

                    <div class="knob-label">Main Motor</div>
                </div>
                <div class="col-md-2 text-center">
                    <canvas width="240" height="240" style="width: 120px; height: 120px;"></canvas>
                    <div style="display:inline;width:120px;height:120px;"><input type="text" class="knob" data-thickness="0.3" data-anglearc="250" data-angleoffset="-125" data-min="-100" data-max="100" value="@liveData.CuttingData.ServoPower" data-width="120" data-height="120" data-fgcolor="#00c0ef" style="width: 64px; height: 40px; position: absolute; vertical-align: middle; margin-top: 40px; margin-left: -92px; border: 0px; background: none; font: bold 24px Arial; text-align: center; color: rgb(0, 192, 239); padding: 0px; appearance: none;"></div>

                    <div class="knob-label">Servo Motor</div>
                </div>
                <div class="col-md-2 text-center">
                    <canvas width="240" height="240" style="width: 120px; height: 120px;"></canvas>
                    <div style="display:inline;width:120px;height:120px;">
                        <input type="text" class="knob" data-thickness="0.1" data-anglearc="250" data-angleoffset="-125" data-min="0" datuiea-max="300" value="@liveData.CuttingData.Cycle" data-width="120" data-height="120" data-readonly="true" readonly="true" data-fgcolor="#606060" style=" width: 64px;height: 40px; position: absolute; vertical-align: middle; margin-top: 40px; margin-left: -92px; border: 0px; background: none; font: bold 24px Arial; text-align: center; color: rgb(0, 192, 239); padding: 0px; appearance: none;">
                    </div>
                    <div class="knob-label">Cycle</div>
                    <div class="btn-group btn-group-sm" role="group" aria-label="Basic example">
                        <button type="button" class="btn btn-primary" @onclick="@(()=> UpDownCycleSpeed("Cycle","D",liveData.CuttingData.CuttingType))"><i class="fas fa-bold fa-2x fa-caret-left"></i> </button>
                        <button type="button" class="btn btn-primary disabled">@Cycle()</button>
                        <button type="button" class="btn btn-primary" @onclick="@(()=> UpDownCycleSpeed("Cycle","U",liveData.CuttingData.CuttingType))"><i class="fas fa-bold fa-2x fa-caret-right"></i></button>
                    </div>
                </div>
                <div class="col-md-2 text-center">
                    <canvas width="240" height="240" style="width: 120px; height: 120px;"></canvas>
                    <div style="display:inline;width:120px;height:120px;"><input type="text" class="knob" data-thickness="0.2" data-anglearc="250" data-angleoffset="-125" data-min="0" data-max="400" value="@liveData.CuttingData.Speed" data-width="120" data-height="120" data-fgcolor="#00c0ef" style="width: 64px; height: 40px; position: absolute; vertical-align: middle; margin-top: 40px; margin-left: -92px; border: 0px; background: none; font: bold 24px Arial; text-align: center; color: rgb(0, 192, 239); padding: 0px; appearance: none;"></div>
                    <div class="knob-label">Speed</div>
                    <div class="btn-group btn-group-sm" role="group" aria-label="Basic example">
                        <button type="button" class="btn btn-primary" @onclick="@(()=> UpDownCycleSpeed("Speed","D",liveData.CuttingData.CuttingType))"><i class="fas fa-bold fa-2x fa-caret-left"></i> </button>
                        <button type="button" class="btn btn-primary disabled">@Speed()</button>
                        <button type="button" class="btn btn-primary" @onclick="@(()=> UpDownCycleSpeed("Speed","U",liveData.CuttingData.CuttingType))"><i class="fas fa-bold fa-2x fa-caret-right"></i></button>
                    </div>
                </div>
                <div class="col-md-2 text-center">
                    <canvas width="240" height="240" style="width: 120px; height: 120px;"></canvas>
                    <div style="display:inline;width:120px;height:120px;"><input type="text" class="knob" data-thickness="0.2" data-anglearc="250" data-angleoffset="-125" data-min="0" data-max="@liveData.CuttingData.QuantityAll" value="@liveData.CuttingData.AmountCutting" data-width="120" data-height="120" data-fgcolor="#00c0ef" style="width: 64px; height: 40px; position: absolute; vertical-align: middle; margin-top: 40px; margin-left: -92px; border: 0px; background: none; font: bold 24px Arial; text-align: center; color: rgb(0, 192, 239); padding: 0px; appearance: none;"></div>
                    <div class="knob-label">Amount Cutting</div>
                    <div class="knob-label">@TotalPiece() </div>
                </div>
            </div>

            <div class="row">
                <div class="col col-md-5 mx-auto p-1">
                    <div class="card bg-secondary d-flex justify-content-center pl-1">
                        <div class="card-header p-0">
                            <p class="mx-2 my-1 text-white text-center"> Eğri Kesim Ölçümü</p>
                        </div>
                        <div class="card-body pt-2">
                            <p class="text-white text-center p-0 m-0">Center</p>
                            <p class="text-white text-center p-0 m-0">@liveData.CuttingData.CurveCut</p>
                            <input type="range" class="custom-range" id="customRange11" min="-5" max="5" value="@liveData.CuttingData.CurveCut">
                        </div>
                        <span class="font-weight-bold text-primary ml-2 valueSpan2"></span>
                    </div>
                </div>
            </div>
            <div class="row p-2 mt-3">
                <div class="col-md-9 p-0 pr-1 mx-auto">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Alarms </h5>
                        </div>
                        <ul class="list-group list-group-flush">
                            @foreach (var alarm in liveData.CuttingData.Alarms)
                            {
                                <li class="list-group-item @SetALarmColor(alarm)">@alarm</li>
                            }
                        </ul>
                        <div class="card-body">
                            <p class="card-text">@liveData.CuttingData.Alarms.Count() alarm active. </p>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    }
    else
    {
        <div class="content p-0 m-0">

            <div class="row mb-2">
                <span class="small text-right">@liveData.TimeToAdd</span>

                <span class="small text-right">Kesim Ekranı Açık Değil </span>
            </div>
        </div>
    }
}

@code {

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public string CompletionRate { get; set; } = "0";
    LiveDataModel liveData;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            liveData = await liveDataService.GetLastData(Id);
            SetCompletionRate();
            StartTimer();
        }
    }

    private void StartTimer()
    {
        Timer.SetTimer(1000);
        Timer.OnElapsed += TimerElapsedHandler;
        Console.WriteLine("Timer Started.");
    }

    private async void TimerElapsedHandler()
    {
        liveData = await liveDataService.GetLastData(Id);
        SetCompletionRate();
        StateHasChanged();
        Console.WriteLine("Timer Ticked.");
    }

    private void SetCompletionRate()
    {
        if (liveData.CuttingData != null) if ((liveData.CuttingData.ElapsedTime + liveData.CuttingData.RemainingTime) == 0) CompletionRate = "0";
            else CompletionRate = Convert.ToInt32(liveData.CuttingData.ElapsedTime * 100 / (liveData.CuttingData.ElapsedTime + liveData.CuttingData.RemainingTime)).ToString();
    }

    private string SetALarmColor(string alarm)
    {
        switch (alarm[1])
        {
            case 'F':
                return "text-danger";

            case 'W':
                return "text-primary";

            case 'I':
                return "text-warning";

            case 'L':
                return "text-success";
        }
        return "";
    }

    private async void MachineStop()
    {
        await commandService.Add(new CommandModel
        {
            DeviceId = Id,
            Code = "STOP",
            Message = "Emergency Stopped!",
            Parameters = null

        });
    }

    private async void MachinePause()
    {
        await commandService.Add(new CommandModel
        {
            DeviceId = Id,
            Code = "PAUSE",
            Message = "Hold after cutting!",
            Parameters = null

        });
    }

    private string Cycle()
    {
        switch (liveData.CuttingData.CuttingType)
        {
            case "Smart":
                return "%" + liveData.CuttingData.CycleMultiplier.ToString();
            default:
                return liveData.CuttingData.Cycle.ToString();
        }
    }

    private string Speed()
    {
        switch (liveData.CuttingData.CuttingType)
        {
            case "Smart":
                return "%" + liveData.CuttingData.SpeedMultiplier.ToString();
            default:
                return liveData.CuttingData.Speed.ToString();
        }

    }

    private string TotalPiece()
    {
        if (liveData.CuttingData.CuttingType != "Manual") return "Total Piece:" + liveData.CuttingData.QuantityAll.ToString(); else return "";
    }

    private async void UpDownCycleSpeed(string property, string value, string type)
    {
        var parameters = new List<Parameters>();
        parameters.Add(new Parameters { Key = "Property", Value = property });
        parameters.Add(new Parameters { Key = "Function", Value = value });
        parameters.Add(new Parameters { Key = "Type", Value = type });

        await commandService.Add(new CommandModel
        {
            Code = "UPDOWN",
            DeviceId = Id,
            Message = "Speed Artır",
            Parameters = parameters
        });
    }

    public void Dispose()
    {
        Timer.Dispose();
    }
}
